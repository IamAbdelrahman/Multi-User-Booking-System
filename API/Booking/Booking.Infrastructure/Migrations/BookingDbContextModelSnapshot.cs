// <auto-generated />
using System;
using Booking.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking.Infrastructure.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    partial class BookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booking.Domain.Entities.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CheckIn");

                    b.HasIndex("CheckOut");

                    b.HasIndex("ReservedByUserId");

                    b.HasIndex("Status");

                    b.HasIndex("TripId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = "b1a6c8a2-9f4e-4f0d-8b4b-1a2d3e4f5a60",
                            CheckIn = new DateTime(2023, 10, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2023, 10, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 9, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Alice Johnson",
                            Notes = "Prefers quiet accommodation room and late check-in for the trip.",
                            ReservationDate = new DateTime(2023, 9, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-paris"
                        },
                        new
                        {
                            Id = "c2b7d9b3-0a5f-4e1e-9c5c-2b3e4f6a7b81",
                            CheckIn = new DateTime(2024, 2, 10, 14, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 2, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 5, 9, 30, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Bob Smith",
                            Notes = "Requests airport pickup for trip arrival.",
                            ReservationDate = new DateTime(2024, 1, 5, 9, 30, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Pending",
                            TripId = "new-id-for-trip-venice"
                        },
                        new
                        {
                            Id = "d3c8eac4-1b6f-5f2f-0d6d-3c4f5e8f9c92",
                            CheckIn = new DateTime(2024, 6, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 6, 7, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 5, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Carla Reyes",
                            ReservationDate = new DateTime(2024, 5, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Cancelled",
                            TripId = "new-id-for-trip-tokyo"
                        },
                        new
                        {
                            Id = "e4d9f0a5-2c7a-4b3b-8f7e-4d5e6f7a8b13",
                            CheckIn = new DateTime(2023, 12, 20, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2023, 12, 25, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 11, 2, 8, 15, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Daniel Kim",
                            Notes = "Allergic to feather bedding during accommodation.",
                            ReservationDate = new DateTime(2023, 11, 2, 8, 15, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-paris"
                        },
                        new
                        {
                            Id = "f5e0a1b6-3d8b-4c4c-9f8f-5e6f7a8b9c24",
                            CheckIn = new DateTime(2024, 3, 10, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 3, 12, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 2, 14, 18, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Evelyn Turner",
                            Notes = "Vegetarian meals requested for trip dining.",
                            ReservationDate = new DateTime(2024, 2, 14, 18, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-rome"
                        },
                        new
                        {
                            Id = "a6f1b2c7-4e9c-4d5d-0a9b-6f7a8b9c0d35",
                            CheckIn = new DateTime(2024, 4, 5, 14, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 4, 9, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 3, 1, 7, 45, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Frank Liu",
                            Notes = "Requests extra towels at accommodation.",
                            ReservationDate = new DateTime(2024, 3, 1, 7, 45, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Pending",
                            TripId = "new-id-for-trip-venice",
                            UpdatedAt = new DateTime(2024, 3, 2, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "b7a2c3d8-5f0d-4e6e-1b0c-7a8b9c0d1e46",
                            CheckIn = new DateTime(2024, 5, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 5, 4, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 4, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Gabriela Santos",
                            Notes = "Anniversary package requested for trip accommodations.",
                            ReservationDate = new DateTime(2024, 4, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-grand-canyon"
                        },
                        new
                        {
                            Id = "c8a3d4e9-6b1e-5f7f-2c1d-8ab9cde57",
                            CheckIn = new DateTime(2024, 7, 15, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 7, 20, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 6, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Hassan Ali",
                            ReservationDate = new DateTime(2024, 6, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Cancelled",
                            TripId = "new-id-for-trip-tokyo"
                        },
                        new
                        {
                            Id = "d9b4e5f0-7a2f-6c8c-3d2e-9bcdef68",
                            CheckIn = new DateTime(2024, 8, 5, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 8, 12, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 7, 21, 9, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Ivy Chen",
                            Notes = "Needs a crib at accommodation during the trip.",
                            ReservationDate = new DateTime(2024, 7, 21, 9, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-himalayan-trek"
                        },
                        new
                        {
                            Id = "e0c5f6d1-8b3d-7e9e-4e3f-0c1d2e3f4a79",
                            CheckIn = new DateTime(2024, 9, 10, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 9, 14, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 8, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Jack O'Neill",
                            Notes = "Late arrival expected for trip check-in.",
                            ReservationDate = new DateTime(2024, 8, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Pending",
                            TripId = "new-id-for-trip-cairo",
                            UpdatedAt = new DateTime(2024, 8, 5, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "f1c6d7e2-9b4f-8a0a-5f4e-1c2d3e4f5180",
                            CheckIn = new DateTime(2024, 10, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 10, 3, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 9, 12, 10, 30, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Kara Novak",
                            Notes = "Allergic to nuts; please note for trip meals.",
                            ReservationDate = new DateTime(2024, 9, 12, 10, 30, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-kyoto"
                        },
                        new
                        {
                            Id = "a2c7e8f3-0b5a-9a1a-6d5e-2c3d4e5f6091",
                            CheckIn = new DateTime(2024, 11, 20, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 11, 25, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Liam O'Connor",
                            Notes = "Includes celebration package during the trip.",
                            ReservationDate = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-paris"
                        },
                        new
                        {
                            Id = "b3c8a9d4-1a6a-0b2b-7c6d-3c4d5e6f7102",
                            CheckIn = new DateTime(2024, 12, 24, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2024, 12, 31, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 11, 11, 9, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Maya Patel",
                            Notes = "Holiday trip booking.",
                            ReservationDate = new DateTime(2024, 11, 11, 9, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Pending",
                            TripId = "new-id-for-trip-venice"
                        },
                        new
                        {
                            Id = "c4c9d0e5-2a7b-1b3b-8d7e-4c5d6e7f8113",
                            CheckIn = new DateTime(2025, 1, 10, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2025, 1, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 12, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Noah Williams",
                            Notes = "Booked with \"Ring in the New Year\" trip package.",
                            ReservationDate = new DateTime(2024, 12, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-tokyo"
                        },
                        new
                        {
                            Id = "d5b0c1d6-3a8b-2c4c-9d8e-5bcdef14",
                            CheckIn = new DateTime(2025, 2, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2025, 2, 7, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 1, 15, 11, 30, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Olivia Brown",
                            Notes = "Prefers window seat for flights related to the trip.",
                            ReservationDate = new DateTime(2025, 1, 15, 11, 30, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-himalayan-trek"
                        },
                        new
                        {
                            Id = "e6b1c2d7-4a9c-3d5d-0a9b-6bcdef15",
                            CheckIn = new DateTime(2025, 4, 10, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2025, 4, 14, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 3, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Peter Novak",
                            ReservationDate = new DateTime(2025, 3, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Pending",
                            TripId = "new-id-for-trip-rome"
                        },
                        new
                        {
                            Id = "f7b2c3d8-5a0d-4e6e-1b0c-7bcdef16",
                            CheckIn = new DateTime(2025, 5, 5, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2025, 5, 9, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 4, 20, 9, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Quinn Harper",
                            Notes = "Pescatarian diet requested for trip meals.",
                            ReservationDate = new DateTime(2025, 4, 20, 9, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-grand-canyon",
                            UpdatedAt = new DateTime(2025, 4, 22, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "a8b3c4d9-6a1c-5f7f-2c1d-8bcde17",
                            CheckIn = new DateTime(2025, 7, 18, 15, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2025, 7, 22, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 6, 12, 13, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Rita Gomez",
                            Notes = "Requires accessible accommodation during the trip.",
                            ReservationDate = new DateTime(2025, 6, 12, 13, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Confirmed",
                            TripId = "new-id-for-trip-paris"
                        },
                        new
                        {
                            Id = "b9c4d5e0-7a2d-6b8b-3c2d-9cdef18",
                            CheckIn = new DateTime(2025, 8, 15, 16, 0, 0, 0, DateTimeKind.Utc),
                            CheckOut = new DateTime(2025, 8, 20, 11, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2025, 8, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            CustomerName = "Samuel Reed",
                            ReservationDate = new DateTime(2025, 8, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            ReservedByUserId = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            Status = "Completed",
                            TripId = "new-id-for-trip-venice"
                        });
                });

            modelBuilder.Entity("Booking.Domain.Entities.Trip", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityName");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Price");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = "new-id-for-trip-paris",
                            CityName = "Paris",
                            Content = "<p>Explore the romantic streets of Paris, from the iconic Eiffel Tower to the historic Louvre Museum. This trip includes a Seine River cruise and a visit to Notre-Dame.</p>",
                            Created = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1502602898657-3e91760cbb34",
                            IsActive = true,
                            Name = "Discover Paris: The City of Lights",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1250.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-venice",
                            CityName = "Venice",
                            Content = "<p>Glide through the enchanting canals of Venice on a traditional gondola. Discover hidden gems and enjoy the unique charm of this floating city.</p>",
                            Created = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1511527661048-7fe73d8e441f",
                            IsActive = true,
                            Name = "Venice Canal Tour",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 950.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-tokyo",
                            CityName = "Tokyo",
                            Content = "<p>Experience the vibrant energy of Tokyo. Visit ancient temples in Asakusa, explore the bustling Shibuya Crossing, and indulge in world-class Japanese cuisine.</p>",
                            Created = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1542051841857-5f90071e79859",
                            IsActive = true,
                            Name = "Tokyo: Modern Meets Tradition",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 2100.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-rome",
                            CityName = "Rome",
                            Content = "<p>Step back in time as you explore the Colosseum, Roman Forum, and Pantheon. Our expert guides will bring the history of the Roman Empire to life.</p>",
                            Created = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1552832230-c0197dd311b5",
                            IsActive = true,
                            Name = "Rome: Ancient Wonders",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1350.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-grand-canyon",
                            CityName = "Las Vegas",
                            Content = "<p>Take a day trip from Las Vegas to the majestic Grand Canyon. This tour includes transportation, lunch, and spectacular photo opportunities.</p>",
                            Created = new DateTime(2024, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1508739773434-c26b3d09e071",
                            IsActive = true,
                            Name = "Grand Canyon Adventure",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 650.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-himalayan-trek",
                            CityName = "Kathmandu",
                            Content = "<p>Embark on an unforgettable trekking journey through the breathtaking Himalayas. Witness stunning mountain vistas and remote village life.</p>",
                            Created = new DateTime(2024, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1554119102-285cf5c5a5bd",
                            IsActive = true,
                            Name = "Himalayan Trek",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 3500.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-cairo",
                            CityName = "Cairo",
                            Content = "<p>Uncover the mysteries of ancient Egypt. This trip includes a visit to the Giza pyramids, the Sphinx, and the Egyptian Museum.</p>",
                            Created = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1539768979805-0d4b4e891edf",
                            IsActive = true,
                            Name = "Cairo & Pyramids",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1800.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-kyoto",
                            CityName = "Kyoto",
                            Content = "<p>Find tranquility in Kyoto. Visit serene Zen gardens, stunning temples, and traditional tea houses. A peaceful escape from the city.</p>",
                            Created = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1493976040374-85c8e12f2c0e",
                            IsActive = true,
                            Name = "Kyoto Zen Gardens",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1900.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-machu-picchu",
                            CityName = "Cusco",
                            Content = "<p>Hike the Inca Trail or take a scenic train ride to the magnificent lost city of Machu Picchu. An incredible journey through ancient Incan history.</p>",
                            Created = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1509219433878-6d6efcaab3b0",
                            IsActive = true,
                            Name = "Machu Picchu Explorer",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 2800.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-iceland",
                            CityName = "Reykjavik",
                            Content = "<p>Chase the Aurora Borealis in Iceland. This tour also includes visits to geysers, waterfalls, and the famous Blue Lagoon.</p>",
                            Created = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1515496281367-1a96cdab32bd",
                            IsActive = true,
                            Name = "Iceland Northern Lights",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1600.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-kenya",
                            CityName = "Nairobi",
                            Content = "<p>Witness the Great Migration in the Maasai Mara. An unforgettable safari experience with up-close encounters with Africa's wildlife.</p>",
                            Created = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1509817923753-9e0551c691f9",
                            IsActive = true,
                            Name = "Safari in Kenya",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 4500.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-sydney",
                            CityName = "Sydney",
                            Content = "<p>Sail across the iconic Sydney Harbour, with spectacular views of the Opera House and Harbour Bridge. A perfect way to see the city.</p>",
                            Created = new DateTime(2023, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1506973035872-a4ec16b8e8d9",
                            IsActive = true,
                            Name = "Sydney Harbour Tour",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 850.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-santorini",
                            CityName = "Santorini",
                            Content = "<p>Experience the legendary sunset of Santorini from a luxury catamaran. Includes dinner and swimming stops in the Aegean Sea.</p>",
                            Created = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1570077188670-e3a8d69ac5ff",
                            IsActive = true,
                            Name = "Santorini Sunset Cruise",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1500.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-new-york",
                            CityName = "New York",
                            Content = "<p>A whirlwind tour of NYC's highlights, including Times Square, Central Park, and the Statue of Liberty. A trip full of energy and excitement.</p>",
                            Created = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1496442226666-8d4d0e62f167",
                            IsActive = true,
                            Name = "New York City: The Big Apple",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1750.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-berlin",
                            CityName = "Berlin",
                            Content = "<p>Dive into the rich and complex history of Berlin. Visit the Brandenburg Gate, the Berlin Wall Memorial, and Museum Island.</p>",
                            Created = new DateTime(2023, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1467269204594-9661b64199da",
                            IsActive = true,
                            Name = "Berlin History Tour",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1050.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-dubai",
                            CityName = "Dubai",
                            Content = "<p>Experience the thrill of a desert safari with dune bashing, camel riding, and a traditional Arabian dinner under the stars.</p>",
                            Created = new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1512453979798-5ea266f8880c",
                            IsActive = true,
                            Name = "Dubai Desert Safari",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 700.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-rio",
                            CityName = "Rio de Janeiro",
                            Content = "<p>Join the world's most famous party! Experience the vibrant parades, samba music, and stunning beaches of Rio during Carnival.</p>",
                            Created = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1483729558449-99ef09a8c325",
                            IsActive = true,
                            Name = "Rio de Janeiro Carnival",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 2500.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-prague",
                            CityName = "Prague",
                            Content = "<p>Stroll through the cobblestone streets of Prague's historic Old Town. See the Astronomical Clock, Charles Bridge, and Prague Castle.</p>",
                            Created = new DateTime(2023, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1541849541-09ce6311e891",
                            IsActive = true,
                            Name = "Prague Old Town",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1100.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-amsterdam",
                            CityName = "Amsterdam",
                            Content = "<p>Discover Amsterdam's unique charm from its iconic canals. This cruise offers a new perspective on the city's historic architecture.</p>",
                            Created = new DateTime(2023, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1534351590667-b8c8c3566fe0",
                            IsActive = true,
                            Name = "Amsterdam Canal Cruise",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 900.00m
                        },
                        new
                        {
                            Id = "new-id-for-trip-bavarian-alps",
                            CityName = "Munich",
                            Content = "<p>Hike through the stunning scenery of the Bavarian Alps. Visit fairytale castles and enjoy the fresh mountain air in southern Germany.</p>",
                            Created = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://images.unsplash.com/photo-1519643381401-22c77e60520e",
                            IsActive = true,
                            Name = "Bavarian Alps Hiking",
                            OwnerId = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            Price = 1400.00m
                        });
                });

            modelBuilder.Entity("Booking.Domain.Entities.TripAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = "new-id-for-trip-paris"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = "new-id-for-trip-venice"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = "new-id-for-trip-tokyo"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = "new-id-for-trip-rome"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = "new-id-for-trip-grand-canyon"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TripId = "new-id-for-trip-himalayan-trek"
                        });
                });

            modelBuilder.Entity("Booking.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dacdb51-fee9-4479-904c-cafe7dca22a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bc5ed7c-f23c-41b2-8f24-6cde1379cf70",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/q6OSHKyNTnPIucWSWuAmTqfZHsqAMA+fnMfFPz28zoy4gwyv9Qy1QTjaAOCnJYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2O776OTQMPGHNUKGKGVD7EK56EWEHWJ4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "3dacdb51-fee9-4479-904c-cafe7dca22a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc5ed7c-f23c-41b2-8f24-6cde1379cf70",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "host@email.com",
                            EmailConfirmed = true,
                            FullName = "Host User",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOST@EMAIL.COM",
                            NormalizedUserName = "HOST",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPhsE1ZH2ywRVcOxNIhAIIfbvEEEUx9a0cKblC7AG3bUp7kBN57YBS6h4eiSpcieg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HOSTSTAMP",
                            TwoFactorEnabled = false,
                            UserName = "host"
                        },
                        new
                        {
                            Id = "4dacdb51-fee9-4479-904c-cafe7dca22a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bc5ed7c-f23c-41b2-8f24-6cde1379cf70",
                            CreatedAt = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer@email.com",
                            EmailConfirmed = true,
                            FullName = "Customer User",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@EMAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMWTZVZgAJ/EsUyRjvSvhzLikb2SaCnhIAP7KuZmp8g7Gofn24rv/MdjHEUgNyB68w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CUSTOMERTAMP",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Booking.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Booking.Domain.Entities.User", "ReservedByUser")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Booking.Domain.Entities.Trip", "Trip")
                        .WithMany("Reservations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservedByUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Booking.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Booking.Domain.Entities.User", "Owner")
                        .WithMany("Trips")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Booking.Domain.Entities.TripAvailability", b =>
                {
                    b.HasOne("Booking.Domain.Entities.Trip", "Trip")
                        .WithMany("TripAvailabilities")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Booking.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Booking.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Booking.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("TripAvailabilities");
                });

            modelBuilder.Entity("Booking.Domain.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
